bufferb = NA,
gradient_time = NA,
source = NA,
mode = "neg",
species = NA,
tissue = "seed",
ce = NA,
meta = NA,
stringsAsFactors = FALSE
)
# Insert this line to experiment table
dbAppendTable(con, "experiment", fftmsneg_exp)
dbReadTable(con, "experiment")
n <- length(ftms_one_tree)
# Récupérer tous les compound_id existants dans la table
compound_ids_raw <- dbReadTable(con, "ms_compound")$compound_id
# Convertir en numérique pour extraire le maximum (même si c'est stocké en character dans la base)
compound_ids <- suppressWarnings(as.numeric(as.character(compound_ids_raw)))
compound_ids <- compound_ids[!is.na(compound_ids)]  # Retirer les NA éventuels
# Trouver le prochain compound_id : 1 si vide, sinon max + 1
start_id <- if (length(compound_ids) == 0) 1 else max(compound_ids) + 1
# Générer les noms des spectres
if(length(spectraNames(ftms_one_tree)) == 0) {
names_vec <- paste0("spec_", seq_len(n))
} else {
names_vec <- spectraNames(ftms_one_tree)
}
# Créer le dataframe avec compound_id en format character, incrémenté à partir du max existant
compounds_df <- data.frame(
compound_id = as.character(seq(start_id, length.out = n)),
nodename = names_vec,
name = rep(NA_character_, n),
formula = rep(NA_character_, n),
mass_measured = precursorMz(ftms_one_tree),
exactmass = rep(NA_real_, n),
ppm_deviation = rep(NA_real_, n),
retention_time = rtime(ftms_one_tree),
expid = rep(new_exp_id, n),
subsid = rep(NA_integer_, n),
conversion = rep(NA_character_, n),
wavelen = rep(NA_real_, n),
smiles = rep(NA_character_, n),
isotope_ratio = rep(NA_real_, n),
drift_time = rep(NA_real_, n),
composition = rep(NA_character_, n),
inchi = rep(NA_character_, n),
inchikey = rep(NA_character_, n),
stringsAsFactors = FALSE
)
# Insérer dans la base de données
dbAppendTable(con, "ms_compound", compounds_df)
#retrieve compound_id from ms_compound table based on the new expid
compound_map <- dbGetQuery(con, paste0(
"SELECT compound_id, nodename FROM ms_compound WHERE expid = ", new_exp_id
))
# Create node_name
names_vec <- paste0("spec_", seq_len(length(ftms_one_tree)))
# Affecting those names to ftms_one_tree data
spectraNames(ftms_one_tree) <- names_vec
compound_map_df <- as.data.frame(compound_map)
#Verify that length of ftms values are equal to the number of spectra
length(compound_map_df$compound_id[match(spectraNames(ftms_one_tree), compound_map_df$nodename)])
#It should return 1222
# Add compound_id column
spectraData(ftms_one_tree)$compound_id <- compound_map_df$compound_id[match(spectraNames(ftms_one_tree), compound_map_df$nodename)]
all(!is.na(ftms_one_tree$compound_id))  # should return TRUE
insertSpectra(cdb, ftms_one_tree)
# the combined database
con <- dbConnect(RSQLite::SQLite(), "C:/Users/amentag/Desktop/copy/data/DyLib_FTMS_neg_or2.sqlite")
dbListTables(con)
#' Load the database as a `CompDb` object
cdb <- CompDb(con)
cdb
dbReadTable(con, "experiment")
dbGetQuery(con, "
SELECT * FROM ms_compound
ORDER BY compound_id DESC
LIMIT 10
")
# the combined database
con <- dbConnect(RSQLite::SQLite(), "C:/Users/amentag/Desktop/copy/data/DyLib_FTMS_neg_or2.sqlite")
dbListTables(con)
#' Load the database as a `CompDb` object
cdb <- CompDb(con)
cdb
dbReadTable(con, "experiment")
dbGetQuery(con, "
SELECT * FROM ms_compound
WHERE compound_id = (SELECT MAX(compound_id) FROM ms_compound)
")
dbGetQuery(con, "SELECT * FROM ms_compound WHERE expid = 266")
con0 <- dbConnect(RSQLite::SQLite(), "C:/Users/amentag/Desktop/copy/data/DyLib_FTMS_neg_or.sqlite")
dbGetQuery(con, "
SELECT * FROM ms_compound
WHERE compound_id = (SELECT MAX(compound_id) FROM ms_compound)
")
dbGetQuery(con0, "
SELECT * FROM ms_compound
WHERE compound_id = (SELECT MAX(compound_id) FROM ms_compound)
")
dbGetQuery(con, "SELECT * FROM ms_compound WHERE compound_id = 100915")
dbGetQuery(con0, "
SELECT * FROM experiment
WHERE expid = (SELECT MAX(expid) FROM experiment)
")
dbGetQuery(con0, "
SELECT * FROM msms_spectrum
ORDER BY spectrum_id DESC
LIMIT 10
")
dbGetQuery(con, "
SELECT * FROM msms_spectrum
ORDER BY spectrum_id DESC
LIMIT 10
")
dbGetQuery(con, "
SELECT * FROM ms_compound
WHERE CAST(compound_id AS INTEGER) = (
SELECT MAX(CAST(compound_id AS INTEGER)) FROM ms_compound
)
")
dbGetQuery(con0, "
SELECT * FROM ms_compound
WHERE CAST(compound_id AS INTEGER) = (
SELECT MAX(CAST(compound_id AS INTEGER)) FROM ms_compound
)
")
pth <- "C:/Users/amentag/Desktop/these/Ahlam/these/equip_msdata/database_QTOF_neg/CSV"
dir(pth)
compound <- read.table(file.path(pth, "compound.csv"), sep = "\t",
header = TRUE)
vapply(compound, class, NA_character_)
nrow(compound)
length(unique(compound$COMPID))
length(unique(compound$EXPID))
experiment <- read.table(file.path(pth, "experiment.csv"), sep = "\t",
header = TRUE)
head(experiment)
vapply(experiment, class, NA_character_)
all(experiment$EXPID %in% compound$EXPID)
readLines(file.path(pth, "spectra.csv"), n = 4)
spectra <- read.table(file.path(pth, "spectra.csv"), sep = "\t",
header = FALSE, skip = 1)
colnames(spectra) <- c("COMPID", "MS2IDLIST")
head(spectra)
nrow(spectra)
vapply(spectra, function(z) sum(z == "NULL"), NA_integer_)
all(spectra$COMPID %in% compound$COMPID)
all(compound$COMPID %in% spectra$COMPID)
all(spectra$COMPID == spectra$MS2IDLIST)
library(dplyr)
library(readr)
library(purrr)
read_csv_safely <- function(file_path, sep = "\t", quote = "\"", header = TRUE, col_types = NULL) {
if (!file.exists(file_path)) {
stop(paste("Le fichier n'existe pas :", file_path))
}
tryCatch({
data <- read_delim(file_path, delim = sep, quote = quote, col_names = header, col_types = col_types)
return(as.data.frame(data))
}, error = function(e) {
message("Erreur lors de la lecture avec read_delim : ", e$message)
message("Essai avec read.csv...")
data <- read.csv(file_path, sep = sep, quote = quote, header = header, stringsAsFactors = FALSE)
return(as.data.frame(data))
})
}
ms2_spectra_path <- "C:/Users/amentag/Desktop/these/Ahlam/these/equip_msdata/database_QTOF_neg/CSV/MS2spectra.csv"
col_types_spectra <- cols(
MS2PEAKLIST = col_character(),
MS2INTENSITYLIST = col_character()
)
ms2<- read_csv_safely(ms2_spectra_path, sep = "\t", col_types = col_types_spectra)
head(ms2)
all(ms2$COMPID %in% compound$COMPID)
all(compound$COMPID %in% ms2$COMPID)
all(spectra$COMPID %in% ms2$COMPID)
all(ms2$COMPID %in% spectra$COMPID)
all(spectra$COMPID == ms2$COMPID)
#' Helper function to replace `"NULL"` with `NA`.
#'
#' @param x `data.frame` or `matrix`.
#'
#' @return `x` with `"NULL"` replaced by `NA`.
fix_na <- function(x) {
for (i in seq_len(ncol(x))) {
if (is.character(x[, i]) || is.factor(x[, i])) {
x[, i] <- as.character(x[, i])
idx <- which(!is.na(x[, i]) & x[, i] == "NULL")
x[idx, i] <- NA
}
}
x
}
ms2$MS2PEAKLIST <- as.character(ms2$MS2PEAKLIST)
ms2$MS2INTENSITYLIST <- as.character(ms2$MS2INTENSITYLIST)
ms2$mz <- lapply(strsplit(ms2$MS2PEAKLIST, split = ","), as.numeric)
ms2$intensity <- lapply(strsplit(ms2$MS2INTENSITYLIST, split = ","), as.numeric)
!is.na(ms2$intensity )
library(CompoundDb)
library(AnnotationHub)
ah <- AnnotationHub()
mb <- ah[["AH119519"]]
library(RSQLite)
con <- dbconn(mb)
dbListTables(con)
dbGetQuery(con, "select * from ms_compound limit 10;")
dbGetQuery(con, "select * from msms_spectrum limit 10;")
dbGetQuery(con, "select distinct ms_level from msms_spectrum;")
dbGetQuery(con, "select * from msms_spectrum_peak limit 10;")
cmps <- compounds(mb)
head(cmps)
s <- Spectra(mb)
spectraVariables(s)
table(s$msLevel)
ms_compound <- compound
colnames(ms_compound) <- tolower(colnames(ms_compound))
#' Rename "COMPID" -> compound_id
colnames(ms_compound) <- sub("^compid", "compound_id", colnames(ms_compound))
ms_compound$compound_id <- as.character(ms_compound$compound_id)
#' Rename compname -> name
colnames(ms_compound) <- sub("^compname", "name", colnames(ms_compound))
#' Rename mass_theoretical -> exactmass
colnames(ms_compound) <- sub("^mass_theoretical", "exactmass",
colnames(ms_compound))
#' Replace NULL with NA
ms_compound <- fix_na(ms_compound)
#' We add the remaining required columns
ms_compound$inchi <- NA_character_
ms_compound$inchikey <- NA_character_
#' Ensure columns have the right data type.
ms_compound$exactmass <- as.numeric(ms_compound$exactmass)
ms_compound$ppm_deviation <- as.numeric(ms_compound$ppm_deviation)
colnames(experiment) <- tolower(colnames(experiment))
#' Define the polarity for the present data: 0 for negative, 1 for positive.
pol <- 0L
proj <- "QTOF_neg"
#' Define the spectrum_id for this MS level:
sid <- seq_len(nrow(ms2))
#' Create/extract the spectra metadata; we might need to add information like
#' collision energy etc later, maybe.
ms_2 <- data.frame(spectrum_id = sid,
ms_level = rep(2L, nrow(ms2)),
polarity = rep(pol, nrow(ms2)),
compound_id = as.character(ms2$COMPID),
precursor_mz = ms2$PARENT_ION,
instrument = rep(experiment$machine[1L], nrow(ms2)),
instrument_type = rep(experiment$mstype[1L], nrow(ms2)),
acquisitionNum = sid,
precScanNum = rep(NA_integer_, nrow(ms2)),
collision_energy = rep(NA_character_, nrow(ms2)),
predicted = rep(FALSE, nrow(ms2)),
splash = rep(NA_character_, nrow(ms2)),
dataOrigin = rep(proj, nrow(ms2)),
original_id = ms2$MS2ID)
#' Expand the peaks data to one fragment peak per row
msms_spectrum_peak <- data.frame(
spectrum_id = rep(sid, lengths(ms2$intensity)),
mz = as.numeric(unlist(ms2$mz, use.names = FALSE)),
intensity = as.numeric(unlist(ms2$intensity, use.names = FALSE)))
msms_spectrum <- ms_2
length(sid)
length(ms2$intensity)
#' Order the peak by m/z per spectrum
msms_spectrum_peak <- msms_spectrum_peak[
order(msms_spectrum_peak$spectrum_id, msms_spectrum_peak$mz), ]
#' at last adding the peak_id as a running integer
msms_spectrum_peak$peak_id <- seq_len(nrow(msms_spectrum_peak))
library(RSQLite)
dbf <- file.path("C:/Users/amentag/Desktop/these/These/clones/RDynlib/data", "DyLib_QTOF_neg.sqlite")
if (file.exists(dbf)) file.remove(dbf)
con <- dbConnect(SQLite(), dbf)
#dbDisconnect(con)
library(CompoundDb)
md <- make_metadata(source = "DynLib QTOF neg", url = NA_character_,
source_version = "1.0.0", source_date = "2025-05-15")
dbWriteTable(con, name = "metadata", md, row.names = FALSE)
#' Write empty synonym table
snm <- data.frame(compound_id = integer(), synonym = character())
dbWriteTable(con, name = "synonym", snm, row.names = FALSE)
#' Write compound table
dbWriteTable(con, name = "ms_compound", ms_compound, row.names = FALSE)
#' Write experiment table
dbWriteTable(con, name = "experiment", experiment, row.names = FALSE)
dbWriteTable(con, name = "msms_spectrum_peak", msms_spectrum_peak,
row.names = FALSE)
dbWriteTable(con, name = "msms_spectrum", msms_spectrum, row.names = FALSE)
#' experiment
tmp <- dbExecute(con, "create index experiment_expid_idx on experiment (expid)")
#' ms_compound
tmp <- dbExecute(
con, "create index compound_id_idx on ms_compound (compound_id)")
tmp <- dbExecute(
con, "create index compound_name_idx on ms_compound (name)")
tmp <- dbExecute(
con, "create index compound_expid_idx on ms_compound (expid)")
#' msms_spectrum
tmp <- dbExecute(
con, "create index spectrum_id_idx on msms_spectrum (spectrum_id)")
tmp <- dbExecute(
con, "create index spectrum_cmp_id_idx on msms_spectrum (compound_id)")
tmp <- dbExecute(
con, "create index msms_psn_idx on msms_spectrum (precScanNum)")
tmp <- dbExecute(
con, "create index msms_an_idx on msms_spectrum (acquisitionNum)")
#' msms_spectrum_peak
tmp <- dbExecute(
con, "create index msms_id_idx on msms_spectrum_peak (spectrum_id)")
dbDisconnect(con)
library(Spectra)
library(CompoundDb)
library(RSQLite)
dbf <- file.path("C:/Users/amentag/Desktop/these/These/clones/RDynlib/data", "DyLib_QTOF_neg.sqlite")
#' Load the database as a `CompDb` object
cdb <- CompDb(dbf)
cdb
compounds(cdb) |> head()
metadata(cdb) |> head()
con <- dbConnect(RSQLite::SQLite(), "C:/Users/amentag/Desktop/these/These/clones/RDynlib/data/DyLib_QTOF_neg.sqlite")
dbListTables(con)
#dbDisconnect(con)
dbReadTable(con, "ms_compound")
library(DBI)
query <- "SELECT COUNT(DISTINCT compound_id) AS unique_ids, COUNT(compound_id) AS total_ids FROM ms_compound"
dbGetQuery(con, query)
dbReadTable(con, "msms_spectrum")
df <- dbGetQuery(con, "SELECT * FROM msms_spectrum WHERE ms_level = 2")
head(df)
dbReadTable(con, "experiment")
dbReadTable(con, "synonym")
dbReadTable(con, "msms_spectrum_peak")
con0 <- dbConnect(RSQLite::SQLite(), "C:/Users/amentag/Desktop/these/These/clones/RDynlib/data/DyLib_QTOF_neg.sqlite")
dbGetQuery(con0, "SELECT COUNT(*) AS nb_lignes FROM experiment")
dbGetQuery(con0, "SELECT COUNT(*) AS nb_lignes FROM experiment")
dbGetQuery(con0, "SELECT COUNT(*) AS nb_lignes FROM ms_compound")
dbGetQuery(con0, "
SELECT * FROM ms_compound
WHERE CAST(compound_id AS INTEGER) = (
SELECT MAX(CAST(compound_id AS INTEGER)) FROM ms_compound
)
")
dbGetQuery(con0, "
SELECT * FROM ms_compound
ORDER BY compound_id DESC
LIMIT 10
")
library(Spectra)
library(CompoundDb)
library(RSQLite)
library(S4Vectors)
load("C:/Users/amentag/Desktop/these/These/clones/new_clones/RDynLib_qtof/data/qtof_filtered.RData")
class(qtof_filtered)
#this will be the combined database
con <- dbConnect(RSQLite::SQLite(), "C:/Users/amentag/Desktop/these/These/clones/RDynlib/data/DyLib_QTOF_negflax.sqlite")
dbListTables(con)
#' Load the database as a `CompDb` object
cdb <- CompDb(con)
cdb
#create an expid starting from the maximum one in experiment table of the Dynlib
new_exp_id <- max(dbReadTable(con, "experiment")$expid, na.rm = TRUE) + 1
fqtofneg_exp <- data.frame(
expid = new_exp_id,
date = format(Sys.Date(), "NA"),
user = NA,
machine = "QTOF",
column = NA,
mstype = "Qtof",
buffera = NA,
bufferb = NA,
gradient_time = NA,
source = NA,
mode = "neg",
species = NA,
tissue = "seed",
ce = NA,
meta = NA,
stringsAsFactors = FALSE
)
# Insert this line to experiment table
dbAppendTable(con, "experiment", fqtofneg_exp)
dbReadTable(con, "experiment")
n <- length(qtof_filtered)
# Récupérer tous les compound_id existants dans la table
compound_ids_raw <- dbReadTable(con, "ms_compound")$compound_id
# Convertir en numérique pour extraire le maximum (même si c'est stocké en character dans la base)
compound_ids <- suppressWarnings(as.numeric(as.character(compound_ids_raw)))
compound_ids <- compound_ids[!is.na(compound_ids)]  # Retirer les NA éventuels
# Trouver le prochain compound_id : 1 si vide, sinon max + 1
start_id <- if (length(compound_ids) == 0) 1 else max(compound_ids) + 1
# Générer les noms des spectres
if(length(spectraNames(qtof_filtered)) == 0) {
names_vec <- paste0("spec_", seq_len(n))
} else {
names_vec <- spectraNames(qtof_filtered)
}
# Créer le dataframe avec compound_id en format character, incrémenté à partir du max existant
compounds_df <- data.frame(
compound_id = as.character(seq(start_id, length.out = n)),
nodename = names_vec,
name = rep(NA_character_, n),
formula = rep(NA_character_, n),
mass_measured = precursorMz(qtof_filtered),
exactmass = rep(NA_real_, n),
ppm_deviation = rep(NA_real_, n),
retention_time = rtime(qtof_filtered),
expid = rep(new_exp_id, n),
subsid = rep(NA_integer_, n),
conversion = rep(NA_character_, n),
wavelen = rep(NA_real_, n),
smiles = rep(NA_character_, n),
isotope_ratio = rep(NA_real_, n),
drift_time = rep(NA_real_, n),
composition = rep(NA_character_, n),
inchi = rep(NA_character_, n),
inchikey = rep(NA_character_, n),
stringsAsFactors = FALSE
)
# Insérer dans la base de données
dbAppendTable(con, "ms_compound", compounds_df)
#retrieve compound_id from ms_compound table based on the new expid
compound_map <- dbGetQuery(con, paste0(
"SELECT compound_id, nodename FROM ms_compound WHERE expid = ", new_exp_id
))
# Create node_name
names_vec <- paste0("spec_", seq_len(length(qtof_filtered)))
# Affecting those names to ftms_one_tree data
spectraNames(qtof_filtered) <- names_vec
compound_map_df <- as.data.frame(compound_map)
#Verify that length of ftms values are equal to the number of spectra
length(compound_map_df$compound_id[match(spectraNames(qtof_filtered), compound_map_df$nodename)])
#It should return 1222
# Add compound_id column
spectraData(qtof_filtered)$compound_id <- compound_map_df$compound_id[match(spectraNames(qtof_filtered), compound_map_df$nodename)]
all(!is.na(qtof_filtered$compound_id))  # should return TRUE
insertSpectra(cdb, qtof_filtered)
# the combined database
con <- dbConnect(RSQLite::SQLite(), "C:/Users/amentag/Desktop/these/These/clones/RDynlib/data/DyLib_QTOF_negflax.sqlite")
dbListTables(con)
#' Load the database as a `CompDb` object
cdb <- CompDb(con)
cdb
dbReadTable(con, "experiment")
dbGetQuery(con, "
SELECT * FROM ms_compound
WHERE CAST(compound_id AS INTEGER) = (
SELECT MAX(CAST(compound_id AS INTEGER)) FROM ms_compound
)
")
dbGetQuery(con, "
SELECT * FROM ms_compound
ORDER BY compound_id DESC
LIMIT 10
")
con0 <- dbConnect(RSQLite::SQLite(), "C:/Users/amentag/Desktop/these/These/clones/RDynlib/data/DyLib_QTOF_neg.sqlite")
dbGetQuery(con0, "
SELECT * FROM ms_compound
ORDER BY compound_id DESC
LIMIT 10
")
dbGetQuery(con0, "
SELECT * FROM ms_compound
WHERE CAST(compound_id AS INTEGER) = (
SELECT MAX(CAST(compound_id AS INTEGER)) FROM ms_compound
)
")
dbGetQuery(con0, "
SELECT * FROM msms_spectrum_peak
ORDER BY Peak_id DESC
LIMIT 10
")
dbGetQuery(con0, "SELECT COUNT(*) AS nb_lignes FROM experiment")
dbGetQuery(con, "SELECT COUNT(*) AS nb_lignes FROM experiment")
dbGetQuery(con, "SELECT COUNT(*) AS nb_lignes FROM ms_compound")
dbGetQuery(con0, "SELECT COUNT(*) AS nb_lignes FROM ms_compound")
?compareSpectra
library(Spectra)
library(CompoundDb)
library(RSQLite)
library(S4Vectors)
getwd()
load("/data/ftms_one_tree.RData")
setwd("load("C:/Users/amentag/Desktop/Rcodes/RDynLib_ftms/")
setwd("C:/Users/amentag/Desktop/Rcodes/RDynLib_ftms/")
getwd()
load("/data/ftms_one_tree.RData")
load("data/ftms_one_tree.RData")
setwd("C:\Users\amentag\Desktop\these\These\clones\RDynlib\RDynLib\Similarity\FTMS")
setwd("C:/Users/amentag/Desktop/these/These/clones/RDynlib/RDynLib/Similarity/FTMS")
load("data/ftms_one_tree.RData")
library(Spectra)
library(CompoundDb)
source("C:/Users/amentag/Desktop/these/These/similarity/FTMS/sim_functions_ftmsneg.R")
source("C:/Users/amentag/Desktop/these/These/clones/RDynlib/RDynLib/Similarity/FTMS/sim_functions_ftmsneg.R")
getwd("C:/Users/amentag/Desktop/these/These/clones/RDynlib/RDynLib/Similarity/FTMS")
setwd("C:/Users/amentag/Desktop/these/These/clones/RDynlib/RDynLib/Similarity/FTMS")
source("sim_functions_ftmsneg.R")
library(DBI)
library(RSQLite)
dbf <- file.path("/data", "DyLib_FTMS_neg2.sqlite")
load("/data/ftms_one_tree.RData")
load("data/ftms_one_tree.RData")
setwd("C:/Users/amentag/Desktop/these/These/clones/new_clones/RDynLib_qtof")
library(DBI)
library(RSQLite)
dbf <- file.path("data", "DyLib_QTOF_neg.sqlite")
library(RSQLite)
dbf <- file.path("data", "DyLib_QTOF_neg.sqlite")
library(mongolite)
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(), "C:/Users/amentag/Desktop/these/These/clones/RDynlib/RDynLib/data/Dynlib_FTMS_neg_or.sqlite")
dbListTables(con)
