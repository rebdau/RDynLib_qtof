---
title: "Selection of representative MS2 spectra per feature"
format: html
---

In this quarto document we filtered the QTOF neg of flax seed data.
We create the precursorPurity and PrecursorIntensity columns.
we remove MS1 data, then we select the 10 %  spectra with highest precursor
purity, and from those spectra we select the 10 %  spectra with highest
precursor intensity and finally we select the spectrum with highest number
of fragments

```{r}
library(Spectra)
library(xcms)
library(MsExperiment)
pth <- getwd()
pth

```

```{r}
#' Note: we will remove this function once it has been added to Spectra.
precursorPurity <- function(object, tolerance = 0.05, ppm = 0,
                            useReportedIsolationWindow = FALSE,
                            BPPARAM = SerialParam()) {
    if (!inherits(object, "Spectra"))
        stop("'object' needs to be a 'Spectra' object.")
    f <- factor(dataOrigin(object))
    BPPARAM <- backendBpparam(object, BPPARAM)
    res <- bplapply(split(object, f), .precursorPurity,
                    tolerance = tolerance, ppm = ppm,
                    useIsolationWindow = useReportedIsolationWindow,
                    BPPARAM = BPPARAM)
    unsplit(res, f = f)
}

.precursorPurity <- function(x, tolerance = 0.3, ppm = 0,
                             useIsolationWindow = FALSE) {
    if (is.unsorted(rtime(x)))
        stop("Spectra with data origin ", dataOrigin(x[1L]),
             " are not increasingly sorted by retention time.")
    ## Get pairs of MS1 and MS2 spectra
    ms2_idx <- which(msLevel(x) == 2L)
    ms1_all <- which(msLevel(x) == 1L)
    ms1_idx <- vapply(ms2_idx, function(i) max(ms1_all[ms1_all < i]), NA_real_)
    ms2_idx <- ms2_idx[is.finite(ms1_idx)]
    ms1_idx <- ms1_idx[is.finite(ms1_idx)]

    ratios <- rep(NA_real_, length(x))
    if (length(ms1_idx)) {
        if (useIsolationWindow) {
            l <- isolationWindowLowerMz(x)[ms2_idx]
            u <- isolationWindowUpperMz(x)[ms2_idx]
        } else {
            pmzs <- precursorMz(x[ms2_idx])
            if (ppm != 0)
                ppms <- ppm(pmzs, ppm)
            else ppms <- 0
            l <- pmzs - (tolerance + ppms)
            u <- pmzs + (tolerance + ppms)
        }
        pks <- peaksData(x[ms1_idx], c("mz", "intensity"), return.type = "list")
        for (i in seq_along(ms1_idx)) {
            p <- pks[[i]]
            p <- p[MsCoreUtils::between(p[, 1L], c(l[i], u[i])), , drop = FALSE]
            if (nrow(p)) {
                intensities <- p[, 2L]
                ratio <- max(intensities) / sum(intensities)
            }
            ratios[ms2_idx[i]] <- ratio
        }
    }
    ratios
}

```


```{r}
load(file.path(pth, "data/qtof.RData"))
qtof_neg <- spectra(qtof)
```

We next calculate the precursor purity for each MS2 spectrum as well as the
precursor intensity (since that is not provided in the original mzML files).

```{r}
precPurity <- precursorPurity(qtof_neg, tolerance = 0.3, ppm = 0)
precursorIntensity <- estimatePrecursorIntensity(
    qtof_neg, tolerance = 0.3, ppm = 0)
qtof_neg$precursorPurity <- precPurity
qtof_neg$precursorIntensity <- precursorIntensity
```

We next extract all MS2 spectra that can be associated to the MS1 feature:

```{r}
qtof@spectra <- qtof_neg
feature_spectra <- featureSpectra(qtof, msLevel = 2L, ppm = 10)
```

The table below summarizes the feature to MS2 spectra information.

```{r, results = "asis"}
library(pander)
tmp <- data.frame(no_features = nrow(featureDefinitions(qtof)),
                  no_features_ms2 = length(unique(feature_spectra$feature_id)),
                  no_selected_ms2 = length(feature_spectra)
                  )
pandoc.table(
    tmp, style = "rmarkdown",
    caption = paste0("Total number of features, features for which an MS2 was",
                     " found and number of selected MS2 spectra."))
```

Only for very few features an MS2 spectrum was found/defined. We next process
the selected MS2 spectra to select the *best representative* MS2 spectrum per
feature:

Select the 10 %  spectra with highest precursor purity

```{r}
library(dplyr)

# Extract the spectra data and fragment counts
purity_df <- as.data.frame(spectraData(feature_spectra)) |>
  mutate(
    fragment_count = lengths(feature_spectra),
    index = row_number()
  )

purity_top <- purity_df |>
    group_by(feature_id) |>
    arrange(desc(precursorPurity)) |>
    mutate(n_rows = n(),
           top_n = ceiling(n_rows * 0.10),
           row_number = row_number()) |>
    filter(row_number <= top_n) |>
    select(-n_rows, -top_n, -row_number)

```

Of these spectra select the 10 %  spectra with highest precursor intensity

```{r}
intensity_top <- purity_top |>
  group_by(feature_id) |>
  arrange(desc(precursorIntensity)) |>
  mutate(n_rows = n(),
         top_n = ceiling(n_rows * 0.10),
         row_number = row_number()) |>
  filter(row_number <= top_n) |>
  select(-n_rows, -top_n, -row_number)

```

Of these spectra select the spectrum with highest number of fragments

```{r}
final_selected <- intensity_top |>
  group_by(feature_id) |>
  filter(fragment_count == max(fragment_count, na.rm = TRUE)) |>
  slice_head(n = 1) # in case of tie

# Extract those spectra from original object
qtof_filtered <- feature_spectra[final_selected$index]

# Check number of unique features retained
length(unique(spectraData(qtof_filtered)$feature_id))
spectraData(qtof_filtered)

```

As a result we have 153 unique feature

Now we save the object

```{r}
save(qtof_filtered, file = file.path(pth, "data", "qtof_filtered"))
```

## Session information

```{r}
sessionInfo()
```
